---
import '@/styles/global.css';
import Sidebar from '@/components/Sidebar';
import { ClientRouter } from 'astro:transitions';
import { Breadcrumb, BreadcrumbList, BreadcrumbItem, BreadcrumbLink, BreadcrumbSeparator, BreadcrumbPage } from '@/components/ui/breadcrumb';
import { cn } from '@/lib/utils';
import { Toaster } from '@/components/ui/toaster';
import { ConnectionPersist } from '@/components/ConnectionPersist';
import { setUserId } from '@/stores/Auth';
// import '@/server';

const defaultSidebarOpen = Astro.cookies.get('sidebar:state')?.value === 'true';

interface Props {
	title: string;
	containerClassName?: string;
}

const { title, containerClassName = '' } = Astro.props;
const {userId} = Astro.locals
const { APPNAME: appName } = import.meta.env;
---

<!doctype html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='viewport' content='width=device-width' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<meta name='generator' content={Astro.generator} />
		<title>{title} - {appName}</title>

		<!-- <script src='https://unpkg.com/react-scan/dist/auto.global.js'></script> -->
		<ClientRouter />
	</head>
	<body class='flex flex-row'>
		<Toaster client:only='react' transition:persist />
		<Sidebar appName={appName} client:only='react' defaultSidebarOpen={defaultSidebarOpen} url={Astro.url} transition:persist />
		<ConnectionPersist client:load transition:persist  />

		<main
			class='relative flex min-h-svh flex-1 flex-col bg-background peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow'>
			<div class="header-spacer mt-12"></div>
			<header class='flex h-12 shrink-0 items-center gap-2 border-b px-4 fixed top-0 w-full z-50 bg-background'>
				<Breadcrumb className='' transition:persist>
					<BreadcrumbList>
						<BreadcrumbItem className='hidden md:block'>
							<BreadcrumbLink href={'/' + Astro.url.pathname.split('/')[2] + '/' + Astro.url.pathname.split('/')[3]}
								>#{Astro.url.pathname.split('/')[3]}</BreadcrumbLink
							>
						</BreadcrumbItem>
						{
							Astro.url.pathname.split('/')[4] && (
								<BreadcrumbSeparator className='hidden md:block' />
								<BreadcrumbItem>
									<BreadcrumbPage>#{Astro.url.pathname.split('/')[4]}</BreadcrumbPage>
								</BreadcrumbItem>
							)
						}
					</BreadcrumbList>
				</Breadcrumb>
			</header>
			<div class:list={cn('flex flex-1 flex-col gap-4 p-4', containerClassName)}>
				<slot />
			</div>
		</main>
	</body>
</html>

<script>
	import { activeWorkspace, setActiveWorkspace } from "@/stores/Workspace";

	const activeWorkspaceId = window.location.pathname.split('/')[1]

	const workspace = activeWorkspace.get();
	if (!workspace || ('error' in workspace)) {
		const res = await fetch(`http://localhost:8000/workspace/${activeWorkspaceId}`, {credentials: 'include'})
		const data = await res.json()
		setActiveWorkspace(data)
	}
</script>
